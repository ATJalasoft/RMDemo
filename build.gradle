import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

group 'org.jalasoft.rommmanager'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
checkstyle{
    toolVersion = "6.1.1"
}
apply plugin: 'pmd'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.bodar.com"
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:3.2.0'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.0.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.0.1'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
    compile group: 'io.rest-assured', name: 'json-schema-validator', version: '3.0.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'

    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
}

task executeFeatures(type: Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()
    options {
        useDefaultListeners = false
//        listeners << ''
        jvmArgs = ['-Dcucumber.options=' +
//                           '--glue org.jalasoft.roommanager.cucumber ' +
//                           '--plugin pretty ' +
//                           '--plugin json:build/cucumber/cucumber.json ' +
//                           '--plugin rerun:build/cucumber/rerun.txt ' +
//                           '--plugin html:build/cucumber-html-report ' +
//                           '--plugin junit:target/test-report.xml ' +
//                           'src/test/resources/features ' +
//                           splitFeatureFolders(featureFolders) + ' ' + //TODO improve execution by folders and all folders
                           cucumberOptions]
        jvmArgs = ['-Dtoken=' + token]
        jvmArgs = ['-Dproxy=' + proxy]
        jvmArgs = ['-Duser=' + user]
        jvmArgs = ['-Dpassword=' + password]
        jvmArgs = ['-Dbrowser=' + browser]

    }


    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    scanForTestClasses = false
    ignoreFailures = true

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}


def generateReport(String pathCucumber, String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)
    String buildProjectName = "roommanager-test"
    Configuration configuration = new Configuration(reportOutputDirectory, buildProjectName)
    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
    reportBuilder.generateReports()
}

def List<String> splitFeatureFolders(String featureFolders) {
    def featureBasePath = 'src/test/resources/features/'
        String[] listFeatureFolders = featureFolders.split(",")
        List<String> listFeaturesPath = new LinkedList<>();
        listFeatureFolders.each { String item -> listFeaturesPath.add(featureBasePath + item.trim() + ' ') }
        return listFeaturesPath
}
